version: 2.1
orbs:
  slack: circleci/slack@4.2.0
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backendStack-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontendStack-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ./frontend
            npm i
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd ./backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd ./frontend
            sudo npm install oauth-sign
            sudo npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd ./backend
            sudo npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run an audit of the frontend
          command: |
            cd ./frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run an audit of the backend
          command: |
            cd ./backend
            npm audit fix --audit-level=critical --force
          

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backendStack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"\
              --tags project=udapeopleBackend
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontendStack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"\
              --tags project=udapeopleFrontend
      - run:
          name: Add back-end ip to ansible inventory & generate memstash links
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
            backendip=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            curl -H "Content-Type: text/plain" -H "token: bc0ecb36-991a-4dc2-a4a3-5fc4ea7814bd" --request PUT --data "$backendip" https://api.memstash.io/values/ec2_back_ip


            backendurl=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --output text)
            curl -H "Content-Type: text/plain" -H "token: bc0ecb36-991a-4dc2-a4a3-5fc4ea7814bd" --request PUT --data "$backendurl" https://api.memstash.io/values/ec2_back_url

      - persist_to_workspace:
          root: .circleci
          paths:
            - ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 9e:a8:42:7b:87:90:8f:17:5b:98:80:0c:3e:19:eb:e6
      - attach_workspace:
          at: /tmp
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            # sudo apt-get -y -qq update
            # sudo apt-get -qq install awscli
            touch .env
            echo ENVIROMENT=production > .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            ls -latr
            cat .env
            npm i
            npm install oauth-sign
            npm run migrations > migrationresult.txt

      - run:
          name: Send migration results to memstash
          command: |
            #!/bin/bash -x
            cd backend
            cat migrationresult.txt
            if [ $(grep -i "has been executed successfully" migrationresult.txt | wc -l) -ge 1 ]
              then 
              curl -H "Content-Type: text/plain" -H "token: bc0ecb36-991a-4dc2-a4a3-5fc4ea7814bd" --request PUT --data "Migration Successful" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              curl -H "token: bc0ecb36-991a-4dc2-a4a3-5fc4ea7814bd" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              else
              curl -H "Content-Type: text/plain" -H "token: bc0ecb36-991a-4dc2-a4a3-5fc4ea7814bd" --request PUT --data "Migration Failed" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              curl -H "token: bc0ecb36-991a-4dc2-a4a3-5fc4ea7814bd" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
    #- destroy-environment

     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -y -qq install awscli
      - run:
          name: Get backend url
          command: |
            API_IPback=$(curl -H "token: bc0ecb36-991a-4dc2-a4a3-5fc4ea7814bd" --request GET https://api.memstash.io/values/ec2_back_ip)
            export API_URL=$(echo "https://$API_IPback:3030")
            cd frontend
            echo "${API_URL}" > apiurl.txt

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            export API_URL=$(cat apiurl.txt)
            cat apiurl.txt
            npm i
            npm run build
            s3Bucket=$(aws s3api list-buckets --query "Buckets[].Name" --output text)
            aws s3 cp dist s3://$s3Bucket/ --recursive
            s3FullUrl=(echo "http://$s3Bucket.s3-website-eu-west-1.amazonaws.com")
            curl -H "Content-Type: text/plain" -H "token: 003cd2b7-b87c-46b5-8507-de70c677d511" --request PUT --data "$s3FullUrl" https://api.memstash.io/values/s3booket
            # aws s3 cp dist s3://$s3Bucket/ --recursive
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 9e:a8:42:7b:87:90:8f:17:5b:98:80:0c:3e:19:eb:e6
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
            sudo apt-get -y -qq install ansible
      - run:
          name: Deploy backend
          command: |
            ls -latr
            file1=(backend/.env)
            touch $file1
            echo ENVIROMENT=production > $file1
            echo TYPEORM_CONNECTION=postgres >> $file1
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> $file1
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> $file1
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> $file1
            echo TYPEORM_HOST=$TYPEORM_HOST >> $file1
            echo TYPEORM_PORT=$TYPEORM_PORT >> $file1
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> $file1
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> $file1
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> $file1
            tar -cvf backend.tar backend
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
      - run:
          name: Get backend url & Backend smoke test.
          command: |
            back_ip=$(curl -H "token: bc0ecb36-991a-4dc2-a4a3-5fc4ea7814bd" --request GET https://api.memstash.io/values/ec2_back_ip)
            curl $back_ip

      - run:
          name: Frontend smoke test.
          command: |
            front_url=$(curl -H "token: 003cd2b7-b87c-46b5-8507-de70c677d511" --request GET https://api.memstash.io/values/s3booket)
            curl -s ${front_url}
            
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      - image: cimg/base:2020.01 
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
     # - scan-frontend:
     #     requires: [test-frontend]
      #- scan-backend:
      #   requires: [test-backend]
      # - deploy-infrastructure
      # - configure-infrastructure:
      #       requires: [deploy-infrastructure]
      # - run-migrations:
      #       requires: [configure-infrastructure]
      - deploy-frontend
            # requires: [run-migrations]
      # - deploy-backend:
      #       requires: [deploy-frontend]
      # - smoke-test:
      #       requires: [deploy-backend]